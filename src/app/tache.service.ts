import { HttpClient, HttpHeaders } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { Observable, tap } from "rxjs";
import { Status, Tache } from "./core/models/Tache";

@Injectable({
  providedIn: 'root',
})
export class TacheService {
  private apiUrl = 'http://localhost:8087/pidev/api/taches'; 

  constructor(private http: HttpClient) {}

  // 1. R√©cup√©rer toutes les t√¢ches
  getAllTaches(): Observable<Tache[]> {
    return this.http.get<Tache[]>(this.apiUrl);
  }

  // 2. R√©cup√©rer une t√¢che par ID
  getTacheById(id: number): Observable<Tache> {
    return this.http.get<Tache>(`${this.apiUrl}/${id}`);
  }

  // 3. Ajouter une t√¢che
  addTache(tache: Tache, missionId: number): Observable<Tache> {
    return this.http.post<Tache>(`${this.apiUrl}/mission/${missionId}`, tache, {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
    });
  }

  // 4. Mettre √† jour une t√¢che
  updateTache(id: number, tache: Tache): Observable<Tache> {
    return this.http.put<Tache>(`${this.apiUrl}/${id}`, tache);
  }

  // 5. Supprimer une t√¢che
  deleteTache(idTache: number): Observable<void> {
    console.log(`üì° Envoi de la requ√™te DELETE pour l'ID : ${idTache}`);
    return this.http.delete<void>(`${this.apiUrl}/${idTache}`);
  }

  // 6. R√©cup√©rer les t√¢ches par mission ID
  getTasksByMission(missionId: number): Observable<Tache[]> {
    return this.http.get<Tache[]>(`${this.apiUrl}/mission/${missionId}`);
  }

  // 7. Rechercher des t√¢ches
  searchTasks(nom: string, etat: Status, priorite: string): Observable<Tache[]> {
    return this.http.get<Tache[]>(`${this.apiUrl}/search`, {
      params: {
        nom: nom || '',
        etat: etat || '',
        priorite: priorite || '',
      },
    });
  }

  updateTaskStatus(idTache: number, status: Status): Observable<Tache> {
    const encodedStatus = encodeURIComponent(status); // S√©curit√© si jamais le status a un caract√®re sp√©cial
    const url = `${this.apiUrl}/${idTache}/status?status=${encodedStatus}`;
    console.log('üì° Envoi du statut via URL :', url);
  
    return this.http.put<Tache>(url, null, {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
    }).pipe(
      tap({
        next: (response) => {
          console.log('‚úÖ Statut mis √† jour :', response);
        },
        error: (err) => {
          console.error('‚ùå Erreur lors de la mise √† jour du statut de la t√¢che :', err);
        }
      })
    );
  }
  
  
}
